#  –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–∞.

# from labyrinth_game.main import game_state
from labyrinth_game.constants import ROOMS
from labyrinth_game.utils import describe_current_room, random_event


def show_inventory(game_state):
    player_inventory = game_state['player_inventory']

    if not player_inventory:
        print('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ –ø—É—Å—Ç')
    else:
        print('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:', ', '.join(player_inventory))
# 

def get_input(prompt="> "):
    try:
        None
    except (KeyboardInterrupt, EOFError):
        print("\n–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.")
        return "quit" 

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è 2
def move_player(game_state, direction: str):
    current_room = game_state['current_room']
    room_data = ROOMS[current_room]

     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã—Ö–æ–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    

        # # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
        # 
        # game_state['current_room'] = new_room
        # game_state['steps_taken'] += 1

        # random_event(game_state)
        # # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
        # describe_current_room(game_state)

    if direction not in room_data.get('exits', {}):
        print("–ù–µ–ª—å–∑—è –ø–æ–π—Ç–∏ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
        return
        
    next_room = room_data['exits'][direction]
    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â
    if next_room == 'treasure_room':
        if 'rusty_key' in game_state['player_inventory']:
            print("\n–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á, " \
            "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—É—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É —Å–æ–∫—Ä–æ–≤–∏—â.")
            game_state['current_room'] = next_room
            game_state['steps_taken'] += 1

            # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
            describe_current_room(game_state)

            # üé≤ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            random_event(game_state)
            return
        else:
            print("–î–≤–µ—Ä—å –∑–∞–ø–µ—Ä—Ç–∞. –ù—É–∂–µ–Ω –∫–ª—é—á, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ.")
            return  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ

    
    
    game_state['current_room'] = next_room
    game_state['steps_taken'] += 1

    # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    describe_current_room(game_state)

    # üé≤ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    random_event(game_state)

    

# –§—É–Ω–∫—Ü–∏—è –≤–∑—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ 3
def take_item(game_state, item_name):
    current_room = game_state['current_room']
    room_data = ROOMS[current_room] 
    room_items = room_data.get('items', [])

    if item_name in room_items:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
        if item_name == 'treasure_chest':
            print('–ò–≥—Ä–æ–∫ –ª–µ–Ω–∏–≤—ã–π –∏ —Å–ª–∞–±—ã–π, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç')
            return
        game_state['player_inventory'].append(item_name)
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        room_items.remove(item_name)
        print(f"–í—ã –ø–æ–¥–Ω—è–ª–∏: {item_name}")
    else:
        print("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–¥–µ—Å—å –Ω–µ—Ç.")


