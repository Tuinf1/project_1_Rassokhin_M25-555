#  –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
import math
from labyrinth_game.constants import ROOMS

def describe_current_room(game_state):
    room_name = game_state['current_room']
    room = ROOMS[room_name]
    print(f"\n== {room_name.upper()} ==")
    print(room['description'])

    # –ø—Ä–µ–¥–º–µ—Ç—ã
    if room.get('items'):
        print("–ó–∞–º–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", ", ".join(room['items']))

    # –≤—ã—Ö–æ–¥—ã
    exits = ", ".join(room['exits'].keys()) if room.get('exits') else "–Ω–µ—Ç"
    print("–í—ã—Ö–æ–¥—ã:", exits)

    # –∑–∞–≥–∞–¥–∫–∞
    puzzle = room.get('puzzle')
    if puzzle and puzzle[0]:
        print("–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –µ—Å—Ç—å –∑–∞–≥–∞–¥–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É solve).")

def solve_puzzle(game_state):

    current_room = game_state['current_room']
    room_data = ROOMS[current_room] 
    room_puzzle = room_data.get('puzzle')


    if  room_puzzle is not None:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
        question, answer = room_puzzle
        
        alternatives = {
        '10': ['10', '–¥–µ—Å—è—Ç—å']
       # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    }
        user_answer = input(f"{question}\n–í–∞—à –æ—Ç–≤–µ—Ç: ").strip().lower()
        valid_answers = alternatives.get(answer.lower(), [answer.lower()])

        # # —É–¥–∞–ª–∏—Ç—å
        # print(valid_answers)


        if user_answer in valid_answers:
            print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–≥–∞–¥–∫–∞ —Ä–µ—à–µ–Ω–∞.")
            room_data['puzzle'] = None  # 

            if current_room == 'hall':
                reward = 'treasure_key'
            elif current_room == 'library':
                reward = 'rusty_key'
            else:
                reward = '–∫–∏–Ω–∂–∞–ª'
            
            if reward not in game_state['player_inventory']:
                game_state['player_inventory'].append(reward)
                print(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É: {reward}")
            else:
                print(f"–ù–∞–≥—Ä–∞–¥–∞ {reward} —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
        else:
            print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            if current_room == 'trap_room':
                trigger_trap(game_state)
    else:
        return print("–ó–∞–≥–∞–¥–∫–∏ –∑–¥–µ—Å—å –Ω–µ—Ç.")



def attempt_open_treasure(game_state):
    current_room = game_state['current_room']
    room_data = ROOMS[current_room]
    room_items = room_data.get('items', [])

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É–Ω–¥—É–∫–∞
    if 'treasure_chest' not in room_items:
        print("–°—É–Ω–¥—É–∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
    inventory = game_state.get('player_inventory', [])
    if 'treasure_key' in inventory:
        print("–í—ã –ø—Ä–∏–º–µ–Ω—è–µ—Ç–µ –∫–ª—é—á, –∏ –∑–∞–º–æ–∫ —â—ë–ª–∫–∞–µ—Ç. –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!")
        room_items.remove('treasure_chest')
        print("–í —Å—É–Ω–¥—É–∫–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
        game_state['game_over'] = True
        return

    # 3Ô∏è‚É£ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
    use_code = input("–°—É–Ω–¥—É–∫ –∑–∞–ø–µ—Ä—Ç. –£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥? (–¥–∞/–Ω–µ—Ç) ").strip().lower()
    if use_code != '–¥–∞':
        print("–í—ã –æ—Ç—Å—Ç—É–ø–∞–µ—Ç–µ –æ—Ç —Å—É–Ω–¥—É–∫–∞.")
        return

    # 4Ô∏è‚É£ –í–≤–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    
    room_puzzle = room_data.get('puzzle')

    question, correct_code = room_puzzle
    user_code = input(f"{question}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ").strip()
    if user_code == correct_code:
        print("–ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!")
        room_items.remove('treasure_chest')
        print("–í —Å—É–Ω–¥—É–∫–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
        game_state['game_over'] = True
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –°—É–Ω–¥—É–∫ –æ—Å—Ç–∞—ë—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º.")

# def show_help():
#     print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
#     print("  go <direction>  - –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (north/south/east/west)")
#     print("  look            - –æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É")
#     print("  take <item>     - –ø–æ–¥–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
#     print("  use <item>      - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
#     print("  inventory       - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
#     print("  solve           - –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–µ—à–∏—Ç—å –∑–∞–≥–∞–¥–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ")
#     print("  quit            - –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
#     print("  help            - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ") 


def show_help(commands):
    print("\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
    for cmd, desc in commands.items():
        print(f"{cmd:<16} ‚Äî {desc}")



def pseudo_random(seed: int, modulo: int) -> int:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—É—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, modulo).
    """
    x = math.sin(seed * 12.9898) * 43758.5453
    fractional = x - math.floor(x)
    return int(fractional * modulo)

def trigger_trap(game_state):
    
    print("‚ö†Ô∏è –õ–æ–≤—É—à–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–ª –Ω–∞—á–∞–ª –¥—Ä–æ–∂–∞—Ç—å...")
    inventory = game_state.get('inventory', [])

    #  –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã ‚Äî —Ç–µ—Ä—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    if inventory:
        idx = pseudo_random(game_state['steps_taken'], len(inventory))
        lost_item = inventory.pop(idx)
        print(f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {lost_item}!")
    else:
        #  –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç ‚Äî —à–∞–Ω—Å —É–º–µ—Ä–µ—Ç—å
        roll = pseudo_random(game_state['steps_taken'], 10)
        if roll < 3:
            print("üíÄ –õ–æ–≤—É—à–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ–π! –í—ã –ø–æ–≥–∏–±–ª–∏.")
            game_state['game_over'] = True
        else:
            print("üò∞ –í–∞–º –ø–æ–≤–µ–∑–ª–æ ‚Äî –≤—ã —á—É–¥–æ–º —É—Ü–µ–ª–µ–ª–∏!")

    return game_state

def random_event(game_state):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (10%)
    
    if pseudo_random(game_state['steps_taken'], 7) != 0:
        # print('efe')
        return  # —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    print('–û–ô-–û–ô, –∫–∞–∂–µ—Ç—Å—è –≤—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –ª–æ–≤—É—à–∫—É!')
    current_room = game_state['current_room']
    inventory = game_state.get('inventory', [])
    room_data = ROOMS[current_room]
    # print(room_data)

    event_type = pseudo_random(game_state['steps_taken'] + 1, 3)

    if event_type == 0:
        # ü™ô –ù–∞—Ö–æ–¥–∫–∞
        print("–í—ã –∑–∞–º–µ—á–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –±–ª–µ—Å—Ç—è—â–µ–µ –Ω–∞ –ø–æ–ª—É ‚Äî —ç—Ç–æ –º–æ–Ω–µ—Ç–∫–∞!")
        room_data['items'].append('coin')

    elif event_type == 1:
        # 
        print("–í—ã —Å–ª—ã—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω–Ω—ã–π —à–æ—Ä–æ—Ö –≥–¥–µ-—Ç–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...")

        if 'sword' in inventory or '–∫–∏–Ω–∂–∞–ª' in inventory:
            weapon = '–º–µ—á' if 'sword' in inventory else '–∫–∏–Ω–∂–∞–ª'
            print(f"–í—ã –≤—ã—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç–µ {weapon} ‚Äî —Å—É—â–µ—Å—Ç–≤–æ –æ—Ç—Å—Ç—É–ø–∞–µ—Ç –≤ —Ç–µ–º–Ω–æ—Ç—É.")
        else:
            print('–í—ã –≤ —Å—Ç—Ä–∞—Ö–µ —É–±–µ–∂–∞–ª–∏ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –Ω–æ –Ω–∏–∫—Ç–æ —ç—Ç–æ–≥–æ –Ω–µ –≤–∏–¥–µ–ª, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ–≥–æ –Ω–µ –±—ã–ª–æ')
    elif event_type == 2:
        # ‚ö†Ô∏è –õ–æ–≤—É—à–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ trap_room –±–µ–∑ —Ñ–∞–∫–µ–ª–∞)
        if current_room == 'trap_room' and 'torch' not in inventory:
            print("–í—ã –æ—Å—Ç—É–ø–∏–ª–∏—Å—å... —á—Ç–æ-—Ç–æ —â—ë–ª–∫–Ω—É–ª–æ –ø–æ–¥ –Ω–æ–≥–æ–π!")
            trigger_trap(game_state)